import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.ajoberstar.grgit' version '5.0.0'
    id 'java'
    id 'maven-publish'
}

group 'net.william278'
version "$ext.plugin_version-${versionMetadata()}"

ext {
    set 'version', version.toString()
    set 'adventure_version', adventure_version.toString()
    set 'jedis_version', jedis_version.toString()
    set 'sqlite_driver_version', sqlite_driver_version.toString()
    set 'mysql_driver_version', mysql_driver_version.toString()
    set 'commons_text_version', commons_text_version.toString()
}

allprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'java'

    compileJava.options.encoding = 'UTF-8'
    compileJava.options.release.set 16
    javadoc.options.encoding = 'UTF-8'
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://libraries.minecraft.net/' }
        maven { url 'https://api.modrinth.com/maven' }
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url 'https://repo.papermc.io/repository/maven-public/' }
        maven { url 'https://repo.minebench.de/' }
        maven { url 'https://repo.alessiodp.com/releases/' }
        maven { url 'https://repo.mikeprimm.com/' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    }

    test {
        useJUnitPlatform()
    }

    processResources {
        filesNotMatching(['**/*.png', '**/*.svg']) {
            filter ReplaceTokens as Class, beginToken: '${', endToken: '}',
                    tokens: rootProject.ext.properties
        }
    }
}

subprojects {
    version rootProject.version
    archivesBaseName = "${rootProject.name}-${project.name.capitalize()}"

    if (['bukkit', 'plugin'].contains(project.name)) {
        shadowJar {
            destinationDirectory.set(file("$rootDir/target"))
            archiveClassifier.set('')
        }

        // API publishing
        if ('bukkit'.contains(project.name)) {
            java {
                withSourcesJar()
                withJavadocJar()
            }
            sourcesJar {
                destinationDirectory.set(file("$rootDir/target"))
            }
            javadocJar {
                destinationDirectory.set(file("$rootDir/target"))
            }
            shadowJar.dependsOn(sourcesJar, javadocJar)

            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        groupId = 'net.william278'
                        artifactId = 'huskhomes'
                        version = "$rootProject.version"
                        artifact shadowJar
                        artifact javadocJar
                        artifact sourcesJar
                    }
                }
            }
        }

        jar.dependsOn shadowJar
        clean.delete "$rootDir/target"
    }
}

logger.lifecycle("Building HuskHomes ${version} by William278")

@SuppressWarnings('GrMethodMayBeStatic')
def versionMetadata() {
    if (grgit == null) {
        return System.getenv("GITHUB_RUN_NUMBER") ? 'build.' + System.getenv("GITHUB_RUN_NUMBER") : 'unknown'
    }
    return grgit.head().abbreviatedId + (grgit.status().clean ? '' : '-indev')
}