import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'io.github.goooler.shadow' version '8.1.8'
    id 'org.cadixdev.licenser' version '0.6.1' apply false
    id 'fabric-loom' version "$fabric_loom_version" apply false
    id 'org.ajoberstar.grgit' version '5.2.2'
    id 'checkstyle'
    id 'maven-publish'
    id 'java'
}

group 'net.william278'
version "$ext.plugin_version${versionMetadata()}"
description "$ext.plugin_description"
defaultTasks 'licenseFormat', 'check', 'build'

ext {
    set 'version', version.toString()
    set 'description', description.toString()

    set 'jedis_version', jedis_version.toString()
    set 'sqlite_driver_version', sqlite_driver_version.toString()
    set 'mysql_driver_version', mysql_driver_version.toString()
    set 'mariadb_driver_version', mariadb_driver_version.toString()
    set 'postgresql_driver_version', postgresql_driver_version.toString()
}

publishing {
    repositories {
        if (System.getenv("RELEASES_MAVEN_USERNAME") != null) {
            maven {
                name = "william278-releases"
                url = "https://repo.william278.net/releases"
                credentials {
                    username = System.getenv("RELEASES_MAVEN_USERNAME")
                    password = System.getenv("RELEASES_MAVEN_PASSWORD")
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
        if (System.getenv("SNAPSHOTS_MAVEN_USERNAME") != null) {
            maven {
                name = "william278-snapshots"
                url = "https://repo.william278.net/snapshots"
                credentials {
                    username = System.getenv("SNAPSHOTS_MAVEN_USERNAME")
                    password = System.getenv("SNAPSHOTS_MAVEN_PASSWORD")
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}

allprojects {
    apply plugin: 'io.github.goooler.shadow'
    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'checkstyle'
    apply plugin: 'java'

    compileJava.options.encoding = 'UTF-8'
    compileJava.options.release.set 17
    javadoc.options.encoding = 'UTF-8'
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.william278.net/releases/' }
        maven { url 'https://maven.fabricmc.net/' }
        maven { url 'https://libraries.minecraft.net/' }
        maven { url 'https://api.modrinth.com/maven' }
        maven { url 'https://repo.papermc.io/repository/maven-public/' }
        maven { url 'https://mvn-repo.arim.space/lesser-gpl3/' }
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
        maven { url 'https://repo.minebench.de/' }
        maven { url 'https://repo.alessiodp.com/releases/' }
        maven { url 'https://repo.essentialsx.net/releases/' }
        maven { url 'https://repo.mikeprimm.com/' }
        maven { url 'https://maven.impactdev.net/repository/development' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.3'

        testCompileOnly 'org.jetbrains:annotations:24.1.0'
    }

    license {
        header = rootProject.file('HEADER')
        include '**/*.java'
        newLine = true
    }

    checkstyle {
        toolVersion = '10.12.0'
    }

    test {
        useJUnitPlatform()
    }

    processResources {
        filesMatching(['**/*.json', '**/*.yml']) {
            filter ReplaceTokens as Class, beginToken: '${', endToken: '}',
                    tokens: rootProject.ext.properties
        }
    }
}

subprojects {
    version rootProject.version
    archivesBaseName = "${rootProject.name}-${project.name.capitalize()}"

    // Fabric-specific configuration
    if (['fabric'].contains(project.name)) {
        apply plugin: 'fabric-loom'
        compileJava.options.release.set 21
        version += "+mc.${fabric_minecraft_version}"
    }

    jar {
        from '../LICENSE'
    }

    shadowJar {
        destinationDirectory.set(file("$rootDir/target"))
        archiveClassifier.set('')
    }

    // API publishing
    if (['common', 'bukkit', 'fabric', 'sponge'].contains(project.name)) {
        java {
            withSourcesJar()
            withJavadocJar()
        }
        sourcesJar {
            destinationDirectory.set(file("$rootDir/target"))
        }
        javadocJar {
            destinationDirectory.set(file("$rootDir/target"))
        }
        shadowJar.dependsOn(sourcesJar, javadocJar)

        publishing {
            if (['common'].contains(project.name)) {
                publications {
                    mavenJavaCommon(MavenPublication) {
                        groupId = 'net.william278.huskhomes'
                        artifactId = 'huskhomes-common'
                        version = "$rootProject.version"
                        artifact shadowJar
                        artifact sourcesJar
                        artifact javadocJar
                    }
                }
            }

            if (['bukkit'].contains(project.name)) {
                publications {
                    mavenJavaBukkit(MavenPublication) {
                        groupId = 'net.william278.huskhomes'
                        artifactId = 'huskhomes-bukkit'
                        version = "$rootProject.version"
                        artifact shadowJar
                        artifact sourcesJar
                        artifact javadocJar
                    }
                }
            }

            if (['fabric'].contains(project.name)) {
                publications {
                    mavenJavaFabric(MavenPublication) {
                        groupId = 'net.william278.huskhomes'
                        artifactId = 'huskhomes-fabric'
                        version = "$rootProject.version+${fabric_minecraft_version}"
                        artifact remapJar
                        artifact sourcesJar
                        artifact javadocJar
                    }
                }
            }

            if (['sponge'].contains(project.name)) {
                publications {
                    mavenJavaSponge(MavenPublication) {
                        groupId = 'net.william278.huskhomes'
                        artifactId = 'huskhomes-sponge'
                        version = "$rootProject.version"
                        artifact shadowJar
                        artifact sourcesJar
                        artifact javadocJar
                    }
                }
            }
        }
    }

    jar.dependsOn shadowJar
    clean.delete "$rootDir/target"
}

logger.lifecycle("Building HuskHomes ${version} by William278")

@SuppressWarnings('GrMethodMayBeStatic')
def versionMetadata() {
    // Require grgit
    if (grgit == null) {
        return '-unknown'
    }

    // If unclean, return the last commit hash with -indev
    if (!grgit.status().clean) {
        return '-' + grgit.head().abbreviatedId  + '-indev'
    }

    // Otherwise if this matches a tag, return nothing
    def tag = grgit.tag.list().find { it.commit.id == grgit.head().id }
    if (tag != null) {
        return ''
    }
    return '-' + grgit.head().abbreviatedId
}